use crate::{block::Block, header::Header, subnets::SUBNETWORK_ID_COINBASE, tx::Transaction};
use karlsen_hashes::{Hash, ZERO_HASH};
use karlsen_muhash::EMPTY_MUHASH;

/// The constants uniquely representing the genesis block
#[derive(Clone, Debug)]
pub struct GenesisBlock {
    pub hash: Hash,
    pub version: u16,
    pub hash_merkle_root: Hash,
    pub utxo_commitment: Hash,
    pub timestamp: u64,
    pub bits: u32,
    pub nonce: u64,
    pub daa_score: u64,
    pub coinbase_payload: &'static [u8],
}

impl GenesisBlock {
    pub fn build_genesis_transactions(&self) -> Vec<Transaction> {
        vec![Transaction::new(0, Vec::new(), Vec::new(), 0, SUBNETWORK_ID_COINBASE, 0, self.coinbase_payload.to_vec())]
    }
}

impl From<&GenesisBlock> for Header {
    fn from(genesis: &GenesisBlock) -> Self {
        Header::new_finalized(
            genesis.version,
            Vec::new(),
            genesis.hash_merkle_root,
            ZERO_HASH,
            genesis.utxo_commitment,
            genesis.timestamp,
            genesis.bits,
            genesis.nonce,
            genesis.daa_score,
            0.into(),
            0,
            ZERO_HASH,
        )
    }
}

impl From<&GenesisBlock> for Block {
    fn from(genesis: &GenesisBlock) -> Self {
        Block::new(genesis.into(), genesis.build_genesis_transactions())
    }
}

impl From<(&Header, &'static [u8])> for GenesisBlock {
    fn from((header, payload): (&Header, &'static [u8])) -> Self {
        Self {
            hash: header.hash,
            version: header.version,
            hash_merkle_root: header.hash_merkle_root,
            utxo_commitment: header.utxo_commitment,
            timestamp: header.timestamp,
            bits: header.bits,
            nonce: header.nonce,
            daa_score: header.daa_score,
            coinbase_payload: payload,
        }
    }
}

/// The genesis block of the block-DAG which serves as the public transaction ledger for the main network.
pub const GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0xb3, 0xba, 0x08, 0xbb, 0x0d, 0x35, 0xd2, 0x9d, 0x05, 0x46, 0xfb, 0x97, 0xc2, 0x9e, 0x61, 0x8f, 0x91, 0x87, 0xa1, 0x7d, 0x44,
        0xa5, 0x07, 0x45, 0xdf, 0x60, 0x50, 0x58, 0x95, 0x13, 0x02, 0x22,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0xeb, 0xaa, 0x28, 0x9c, 0x50, 0x8e, 0xa9, 0x38, 0x06, 0x77, 0x59, 0x7e, 0x3f, 0xbf, 0x8c, 0xcf, 0xa0, 0x54, 0x2f, 0xe2, 0xb3,
        0x2c, 0x21, 0x84, 0xa0, 0xfb, 0x09, 0x0f, 0x61, 0x6c, 0xbe, 0xd4,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 0x17c5f62fbb6,
    bits: 0x1e7fffff,
    nonce: 0x14582,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xe1, 0xf5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01, // Varint
        0x00, // OP-FALSE
        0x66, 0x6f, 0x72, 0x20, 0x61, 0x76, 0x65, 0x72,
        0x61, 0x67, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x65,
        0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x76, 0x65,
        0x72, 0x61, 0x67, 0x65, 0x20, 0x75, 0x73, 0x65,
        0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x70, 0x69, 0x65, 0x63, 0x65,
        0x20, 0x6f, 0x66, 0x20, 0x61, 0x72, 0x74, 0x20,
        0x6b, 0x61, 0x73, 0x70, 0x61,
    ],
};

// Karlsen migrated
pub const TESTNET_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0xa9, 0x91, 0xa2, 0xbf, 0x27, 0x1c, 0x1d, 0x2a, 0x7f, 0xc7, 0x63, 0x5d, 0x13, 0xaf, 0xef, 0x8f, 0x75, 0x2b, 0x1d, 0x89, 0xf9,
        0x41, 0x4b, 0x87, 0xe0, 0x8d, 0x99, 0x84, 0xea, 0xf7, 0x42, 0xb2,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x06, 0x8e, 0x09, 0xad, 0xab, 0x75, 0x3b, 0x8c, 0x0d, 0x91, 0x61, 0xb9, 0xde, 0x39, 0x5a, 0x4a, 0xa2, 0x38, 0xcb, 0xa8, 0x9b,
        0xdc, 0x9b, 0x03, 0x67, 0xf6, 0xab, 0xdf, 0xe9, 0xd0, 0x0b, 0xe0,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 0x17c5f62fbb6,
    bits: 0x1e7fffff,
    nonce: 0x14582,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xe1, 0xf5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01, // Varint
        0x00, // OP-FALSE
        0x6b, 0x61, 0x72, 0x6c, 0x73, 0x65, 0x6e, 0x2d,
        0x74, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74,
    ],
};

// Testnet 11 not yet operational in Karlsen
pub const TESTNET11_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0xcf, 0xa2, 0xa7, 0xeb, 0xfb, 0x8b, 0x4e, 0xa3, 0x45, 0x30, 0x7b, 0xc2, 0x5e, 0xf9, 0x42, 0x1b, 0x23, 0x91, 0xf0, 0x9c, 0x8b,
        0x2c, 0xf2, 0x15, 0xf0, 0x75, 0x60, 0xaf, 0x0d, 0x4d, 0x71, 0x64,
    ]),
    hash_merkle_root: Hash::from_bytes([
        0x3c, 0x35, 0xdb, 0x98, 0x02, 0x7e, 0x84, 0x6e, 0x02, 0xcc, 0x60, 0xb7, 0xa7, 0xfa, 0xb1, 0x6d, 0x6c, 0xf2, 0xa5, 0x42, 0xd8,
        0xe1, 0x60, 0xad, 0x9c, 0xd9, 0x08, 0x5f, 0x51, 0x0c, 0x47, 0xbb,
    ]),
    bits: 504155340, // see `gen_testnet11_genesis`
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xe1, 0xf5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01,                                                                         // Varint
        0x00,                                                                         // OP-FALSE
        0x6b, 0x61, 0x73, 0x70, 0x61, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, // karlsen-testnet
        11, 4                                                                         // TN11, Relaunch 4
    ],
    ..TESTNET_GENESIS
};

// Karlsen migrated
pub const SIMNET_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0x8f, 0xe8, 0xb0, 0xf8, 0x04, 0x32, 0x52, 0xfd, 0xe9, 0x27, 0x09, 0x26, 0x33, 0x93, 0x79, 0x20, 0x94, 0x79, 0x5f, 0x34, 0x4e,
        0xc2, 0x52, 0xc9, 0xb7, 0x56, 0xd1, 0xd1, 0x3e, 0x0d, 0xfe, 0x11,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x04, 0xcf, 0x01, 0xcf, 0xc2, 0x9e, 0xce, 0x66, 0x55, 0x43, 0xd6, 0xbf, 0x5e, 0xc0, 0x99, 0x98, 0x8d, 0x4d, 0x3b, 0xaf, 0x19,
        0xf2, 0x8f, 0xb0, 0xf9, 0xd4, 0xfa, 0xe3, 0x41, 0x20, 0x85, 0x17,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 0x17c5f62fbb6,
    bits: 0x207fffff,
    nonce: 0x2,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xe1, 0xf5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01, // Varint
        0x00, // OP-FALSE
        0x6b, 0x61, 0x72, 0x6c, 0x73, 0x65, 0x6e, 0x2d,
        0x73, 0x69, 0x6d, 0x6e, 0x65, 0x74,
    ],
};

// Karlsen migrated
pub const DEVNET_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0xcb, 0x1b, 0x9e, 0x97, 0x2c, 0x04, 0x3e, 0xc9, 0x98, 0xc4, 0x36, 0x13, 0x46, 0x45, 0x04, 0xe1, 0x7d, 0xf2, 0xa4, 0x5a, 0x8a,
        0x6a, 0xa1, 0x16, 0x21, 0xd9, 0x4b, 0x87, 0x6d, 0x69, 0xe0, 0xd4,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x5e, 0xab, 0x60, 0xd4, 0xaa, 0x01, 0x02, 0x97, 0x8b, 0xc6, 0x8b, 0x43, 0xc5, 0x4d, 0x22, 0x8b, 0x71, 0x38, 0xa4, 0x20, 0x54,
        0x48, 0x84, 0x31, 0x96, 0x7b, 0xc7, 0xaa, 0x86, 0x51, 0xb0, 0xe9,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 0x11e9db49828,
    bits: 0x1f4ee5fb,
    nonce: 0x48e5e,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xe1, 0xf5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01, // Varint
        0x00, // OP-FALSE
        0x6b, 0x61, 0x72, 0x6c, 0x73, 0x65, 0x6e, 0x2d,
        0x64, 0x65, 0x76, 0x6e, 0x65, 0x74,
    ],
};

#[cfg(test)]
mod tests {
    use super::*;
    use crate::{config::bps::Testnet11Bps, merkle::calc_hash_merkle_root};

    #[test]
    fn test_genesis_hashes() {
        [GENESIS, TESTNET_GENESIS, TESTNET11_GENESIS, SIMNET_GENESIS, DEVNET_GENESIS].into_iter().for_each(|genesis| {
            let block: Block = (&genesis).into();
            assert_hashes_eq(calc_hash_merkle_root(block.transactions.iter(), false), block.header.hash_merkle_root);
            assert_hashes_eq(block.hash(), genesis.hash);
        });
    }

    #[test]
    fn gen_testnet11_genesis() {
        let bps = Testnet11Bps::bps();
        let mut genesis = TESTNET_GENESIS;
        let target = karlsen_math::Uint256::from_compact_target_bits(genesis.bits);
        let scaled_target = target * bps / 100;
        let scaled_bits = scaled_target.compact_target_bits();
        genesis.bits = scaled_bits;
        if genesis.bits != TESTNET11_GENESIS.bits {
            panic!("Testnet 11: new bits: {}\nnew hash: {:#04x?}", scaled_bits, Block::from(&genesis).hash().as_bytes());
        }
    }

    fn assert_hashes_eq(got: Hash, expected: Hash) {
        if got != expected {
            // Special hex print to ease changing the genesis hash according to the print if needed
            panic!("Got hash {:#04x?} while expecting {:#04x?}", got.as_bytes(), expected.as_bytes());
        }
    }
}
